
name: Runtime Error Check

on:
  workflow_dispatch:

jobs:
  runtime-check:
    name: Build, Serve, and Runtime Error Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
        env:
          CI: true
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Serve build
        run: npx serve -s dist -l 4173 &
      - name: Wait for server
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:4173 > /dev/null; then
              echo 'Server is up!';
              exit 0;
            fi;
            sleep 2;
          done;
          echo 'Server did not start in time.';
          exit 1
      - name: Create Playwright runtime error check
        run: |
          echo "const { test, expect } = require('@playwright/test');\n\ntest('no runtime errors on load', async ({ page }) => {\n  const errors = [];\n  page.on('pageerror', (err) => errors.push('Page error: ' + err.message));\n  page.on('console', (msg) => {\n    if (msg.type() === 'error') errors.push('Console error: ' + msg.text());\n  });\n  await page.goto('http://localhost:4173', { waitUntil: 'networkidle' });\n  expect(errors, `Runtime errors found:\n${errors.join('\\n')}`).toEqual([]);\n});" > runtime-error-check.spec.js
      - name: Run Playwright runtime error check
        run: npx playwright test runtime-error-check.spec.js --reporter=list
        env:
          CI: true
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
